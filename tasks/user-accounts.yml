---
- include_tasks: scripts.yml
  loop: "{{ security_user_accounts_scripts }}"
  loop_control:
    loop_var: script

- name: apply login.defs settings
  lineinfile:
    path: "{{ item.path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items: "{{ security_login_def_settings }}"

- name: Ensure default group for the root account is GID 0
  ansible.builtin.command:
    cmd: usermod -g 0 root
  become: true

- name: set the pam_umask.so in /etc/pam.d/common-session
  lineinfile:
    path: /etc/pam.d/common-session
    regexp: '^session\soptional\s*pam_umask.so'
    line: 'session optional pam_umask.so'
    state: present
    backup: yes
  notify: Restart sshd service

- name: Remove conflicting TMOUT definitions
  lineinfile:
    path: "{{ item }}"
    regexp: '^\s*TMOUT='
    state: absent
    backup: yes
  with_fileglob:
    - /etc/bash.bashrc
    - /etc/profile
    - /etc/profile.d/*.sh

# 2. Configure TMOUT in one central location
- name: Create a dedicated TMOUT configuration file
  copy:
    dest: /etc/profile.d/tmout.sh
    content: |
      # Set TMOUT to enforce session timeout
      TMOUT=900
      readonly TMOUT
      export TMOUT
    owner: root
    group: root
    mode: '0644'

# 3. Validate TMOUT does not exceed 900 or is set to 0
- name: Validate TMOUT setting
  lineinfile:
    path: /etc/profile.d/tmout.sh
    regexp: '^\s*TMOUT='
    line: 'TMOUT=900'
    state: present

- name: Install libpwquality-tools utilities
  apt:
    name:
      - libpwquality-tools
    state: present
  become: yes

- name: Copy the pwquality.conf file to the remote hosts
  ansible.builtin.copy:
    src: files/pwquality.conf
    dest: /etc/security/pwquality.conf
  become: yes

- name: Ensure inactive password lock is 30 days or less
  ansible.builtin.command:
    cmd: useradd -D -f 30
  become: true

