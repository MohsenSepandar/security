---
# tasks file for sec-ansible
- name: Copy the Storage script to the remote host
  ansible.builtin.copy:
    src: files/storage-usb.sh
    dest: /usr/local/bin/disable_usb_storage.sh
  become: yes

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/disable_usb_storage.sh
    mode: '0755'

- name: Run the script to disable usb-storage module
  shell: /usr/local/bin/disable_usb_storage.sh
  register: script_output

- name: Display the script output
  debug:
    var: script_output.stdout

- name: Check if autofs is installed
  apt:
    name: autofs
    state: absent
    purge: yes
  register: autofs_purge

- name: Stop the autofs service if running
  service:
    name: autofs
    state: stopped
  ignore_errors: true
  when: autofs_purge.changed == false

- name: Mask the autofs service
  systemd:
    name: autofs
    masked: yes

- name: Copy the Cramfs script to the remote host
  ansible.builtin.copy:
    src: files/cramfs.sh
    dest: /usr/local/bin/cramfs.sh
  become: yes 

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/cramfs.sh
    mode: '0755'

- name: Run the script to disable cramfs  module
  shell: /usr/local/bin/cramfs.sh
  register: script_output
    
- name: Display the script output
  debug:
    var: script_output.stdout

- name: Copy the Freexvfs script to the remote host
  ansible.builtin.copy:
    src: files/freexvfs.sh
    dest: /usr/local/bin/freexvfs.sh
  become: yes

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/freexvfs.sh
    mode: '0755'

- name: Run the script to disable freexvfs  module
  shell: /usr/local/bin/cramfs.sh
  register: script_output

- name: Display the script output
  debug:
    var: script_output.stdout

- name: Copy the hfsplus script to the remote host
  ansible.builtin.copy:
    src: files/hfsplus.sh
    dest: /usr/local/bin/hfsplus.sh
  become: yes

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/hfsplus.sh
    mode: '0755'

- name: Run the script to disable hfsplus module
  shell: /usr/local/bin/hfsplus.sh
  register: script_output

- name: Display the script output
  debug:
    var: script_output.stdout

- name: Ensure /etc/passwd has correct ownership
  file:
    path: /etc/passwd
    owner: root
    group: root
    state: file
    mode: '0644'

- name: Ensure /etc/passwd- has correct ownership
  file:
    path: /etc/passwd-
    owner: root
    group: root
    state: file
    mode: '0644'

- name: Ensure /etc/group has correct ownership
  file:
    path: /etc/group
    owner: root
    group: root
    state: file
    mode: '0644'

- name: Ensure /etc/group- has correct ownership
  file:
    path: /etc/group-
    owner: root
    group: root
    state: file
    mode: '0644'

- name: Ensure /etc/shadow has correct ownership
  file:
    path: /etc/shadow
    owner: root
    group: shadow
    state: file
    mode: '0640'

- name: Ensure /etc/shadow- has correct ownership
  file:
    path: /etc/shadow-
    owner: root
    group: shadow
    state: file
    mode: '0640'

- name: Check if /etc/security/opasswd exists
  stat:
    path: /etc/security/opasswd
  register: opasswd_file

- name: Set permissions for /etc/security/opasswd (u-x,go-rwx) if it exists
  file:
    path: /etc/security/opasswd
    mode: '0600'  # Equivalent to u-x,go-rwx (readable/writable by owner only)
  when: opasswd_file.stat.exists

- name: Set ownership to root:root for /etc/security/opasswd if it exists
  file:
    path: /etc/security/opasswd
    owner: root
    group: root
  when: opasswd_file.stat.exists

- name: Ensure /etc/gshadow has correct ownership
  file:
    path: /etc/gshadow
    owner: root
    group: shadow
    state: file
    mode: '0640'

- name: Ensure /etc/gshadow- has correct ownership
  file:
    path: /etc/gshadow-
    owner: root
    group: shadow
    state: file
    mode: '0640'

- name: Set permissions for /etc/shells (u-x,go-wx)
  file:
    path: /etc/shells
    owner: root
    group: root
    state: file
    mode: '0644'

- name: Copy the Secure Files script to the remote host
  ansible.builtin.copy:
    src: files/secure-file.sh
    dest: /usr/local/bin/secure-file.sh
  become: yes

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/secure-file.sh
    mode: '0755'

- name: Run the script to Secure Files| Be Patient
  shell: /usr/local/bin/secure-file.sh
  register: script_output

- name: Display the script output
  debug:
    var: script_output.stdout    

- name: Purge ldap-utils package
  apt:
    name: ldap-utils
    state: absent
    purge: yes

- name: Purge rpcbind  package
  apt:
    name: rpcbind
    state: absent
    purge: yes


- name: Ensure /etc/systemd/system directory exists
  file:
    path: /etc/systemd/system
    state: directory
    mode: '0755'

- name: Copy tmp.mount from /usr/share/systemd to /etc/systemd/system
  copy:
    src: /usr/share/systemd/tmp.mount
    dest: /etc/systemd/system/tmp.mount
    owner: root
    group: root
    mode: '0644'
    backup: yes
  register: copy_result
  become: yes

- name: Append noexec to the Options line in [Mount] section
  lineinfile:
    path: /etc/systemd/system/tmp.mount
    regexp: '^Options='       # Match the existing Options= line
    line: "Options=mode=1777,strictatime,nosuid,nodev,size=50%%,nr_inodes=1m,noexec"  # Full line with noexec
    insertafter: '\[Mount\]'  # Ensure it's under the [Mount] section
    state: present            # Ensure the line is present and updated
  notify: Reload systemd daemon
  become: yes

- name: Show the copy result
  debug:
    var: copy_result

- name: Install AppArmor and AppArmor utilities
  apt:
    name:
      - apparmor
      - apparmor-utils
    state: present
    update_cache: yes
  become: yes

- name: Ensure /etc/motd is owned by root
  shell: chown root:root $(readlink -e /etc/motd)
  args:
    warn: false
  when: ansible_facts['os_family'] == "Debian" and ansible_facts['distribution'] != "Ubuntu"
  become: yes

- name: Ensure /etc/motd has correct permissions
  shell: chmod u-x,go-wx $(readlink -e /etc/motd)
  args:
    warn: false
  when: ansible_facts['os_family'] == "Debian" and ansible_facts['distribution'] != "Ubuntu"
  become: yes

- name: Ensure /etc/issue is owned by root
  shell: chown root:root $(readlink -e /etc/issue)
  args:
    warn: false
  become: yes

- name: Ensure /etc/issue has correct permissions
  shell: chmod u-x,go-wx $(readlink -e /etc/issue)
  args:
    warn: false
  become: yes

- name: Ensure /etc/issue.net is owned by root
  shell: chown root:root $(readlink -e /etc/issue.net)
  args:
    warn: false
  become: yes

- name: Ensure /etc/issue.net has correct permissions
  shell: chmod u-x,go-wx $(readlink -e /etc/issue.net)
  args:
    warn: false
  become: yes

- name: Install chrony
  apt:
    name: chrony
    state: present
    update_cache: yes
  become: yes

- name: Remove existing server lines from chrony.conf
  lineinfile:
    path: /etc/chrony/chrony.conf
    regexp: '^server '
    state: absent
  become: yes    

- name: Add specific server entries to chrony.conf
  blockinfile:
    path: /etc/chrony/chrony.conf
    block: |
      server 172.17.255.20 iburst
      server 172.17.255.21 iburst
    insertafter: '^#.*Server entries'
  become: yes

- name: Ensure chrony service is enabled and started
  systemd:
    name: chrony
    enabled: yes
    state: started
  become: yes

- name: Ensure ntp is not installed (if applicable)
  apt:
    name: ntp
    state: absent
  when: ansible_facts.packages.ntp is defined  # Check if ntp is installed
  become: yes

- name: Disable and mask ntp service (if exists)
  systemd:
    name: ntp
    enabled: no
    masked: yes
    state: stopped
  when: ansible_facts.packages.ntp is defined  # Check if ntp is installed
  become: yes

- name: Disable and mask systemd-timesyncd.service
  systemd:
    name: systemd-timesyncd.service
    enabled: no
    masked: yes
    state: stopped
  become: yes

- name: Purge slapd
  apt:
    name: slapd
    state: absent
    purge: yes
  become: yes

- name: Purge bind9
  apt:
    name: bind9
    state: absent
    purge: yes
  become: yes

- name: Purge vsftpd
  apt:
    name: vsftpd
    state: absent
    purge: yes
  become: yes

- name: Purge apache2
  apt:
    name: apache2
    state: absent
    purge: yes
  become: yes

- name: Purge snmpd
  apt:
    name: snmpd
    state: absent
    purge: yes
  become: yes

- name: Purge dnsmasq
  apt:
    name: dnsmasq
    state: absent
    purge: yes
  become: yes

- name: Set ownership of /boot/grub/grub.cfg to root:root
  file:
    path: /boot/grub/grub.cfg
    owner: root
    group: root
  become: yes

- name: Set permissions on /boot/grub/grub.cfg to u-x,go-rwx
  file:
    path: /boot/grub/grub.cfg
    mode: '0600'
  become: yes

############## added by Mohsen ##########################

- name: Copy the wireless script to the remote hosts
  ansible.builtin.copy:
    src: files/wireless.sh
    dest: /usr/local/bin/wireless.sh
  become: yes

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/wireless.sh
    mode: '0755'

- name: Run the script to ensure wireless interfaces are disabled
  shell: /usr/local/bin/wireless.sh
  register: wireless_output

- name: Copy the system account script to the remote hosts
  ansible.builtin.copy:
    src: files/system-accounts.sh
    dest: /usr/local/bin/system-accounts.sh
  become: yes

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/system-accounts.sh
    mode: '0755'

- name: Run the script to ensure system accounts are secured
  shell: /usr/local/bin/system-accounts.sh
  register: system_accounts_output

- name: Display the system-accounts.sh output
  debug:
    var: system_accounts_output.stdout

- name: Ensure default group for the root account is GID 0
  ansible.builtin.command:
    cmd: usermod -g 0 root
  become: true

- name: set the Umask in /etc/login.defs
  lineinfile:
    path: /etc/login.defs
    regexp: '^UMASK'
    line: 'UMASK 027'
    state: present
  notify: Restart sshd service

- name: set the USERGROUPS_ENAB option in /etc/login.defs
  lineinfile:
    path: /etc/login.defs
    regexp: '^USERGROUPS_ENAB'
    line: 'USERGROUPS_ENAB no'
    state: present

- name: set the pam_umask.so in /etc/pam.d/common-session
  lineinfile:
    path: /etc/pam.d/common-session
    regexp: '^session\soptional\s*pam_umask.so'
    line: 'session optional pam_umask.so'
    state: present
    backup: yes
  notify: Restart sshd service

- name: Remove conflicting TMOUT definitions
  lineinfile:
    path: "{{ item }}"
    regexp: '^\s*TMOUT='
    state: absent
    backup: yes
  with_fileglob:
    - /etc/bash.bashrc
    - /etc/profile
    - /etc/profile.d/*.sh

# 2. Configure TMOUT in one central location
- name: Create a dedicated TMOUT configuration file
  copy:
    dest: /etc/profile.d/tmout.sh
    content: |
      # Set TMOUT to enforce session timeout
      TMOUT=900
      readonly TMOUT
      export TMOUT
    owner: root
    group: root
    mode: '0644'

# 3. Validate TMOUT does not exceed 900 or is set to 0
- name: Validate TMOUT setting
  lineinfile:
    path: /etc/profile.d/tmout.sh
    regexp: '^\s*TMOUT='
    line: 'TMOUT=900'
    state: present

- name: Install libpwquality-tools utilities
  apt:
    name:
      - libpwquality-tools
    state: present
    update_cache: yes
  become: yes

- name: Copy the pwquality.conf file to the remote hosts
  ansible.builtin.copy:
    src: files/pwquality.conf
    dest: /etc/security/pwquality.conf
  become: yes

- name: set the PASS_MIN_DAYS option in /etc/login.defs
  lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_MIN_DAYS'
    line: 'PASS_MIN_DAYS 1'
    state: present

- name: set the PASS_MAX_DAYS option in /etc/login.defs
  lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_MAX_DAYS'
    line: 'PASS_MAX_DAYS 365'
    state: present

- name: set the PASS_WARN_AGE option in /etc/login.defs
  lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_WARN_AGE'
    line: 'PASS_WARN_AGE 7'
    state: present

- name: Ensure inactive password lock is 30 days or less
  ansible.builtin.command:
    cmd: useradd -D -f 30
  become: true

- name: Copy the user default parameters script to the remote hosts
  ansible.builtin.copy:
    src: files/user-default-parameters.sh
    dest: /usr/local/bin/user-default-parameters.sh
  become: yes

- name: Ensure the user-default-parameters.sh script is executable
  file:
    path: /usr/local/bin/user-default-parameters.sh
    mode: '0755'

- name: Run the user-default-parameters.sh script to ensure all the already-exist users have appropriate parameters
  shell: /usr/local/bin/user-default-parameters.sh
  register: user_default_parameters_output

- name: Display the user-default-parameters.sh output
  debug:
    var: user_default_parameters_output.stdout


- name: Copy the log permission script to the remote hosts
  ansible.builtin.copy:
    src: files/log-permission.sh
    dest: /usr/local/bin/log-permission.sh
  become: yes

- name: Ensure the script is executable
  file:
    path: /usr/local/bin/log-permission.sh
    mode: '0755'

- name: Run the log-permission.sh script to ensure all logfiles have appropriate access configured
  shell: /usr/local/bin/log-permission.sh
  register: log_permission_output

- name: Display the log-permission.sh output
  debug:
    var: log_permission_output.stdout

- name: Ensure journald service is enabled
  ansible.builtin.systemd:
    name: systemd-journald
    state: started
    enabled: yes

- name: Ensure journald is configured to compress large log files
  lineinfile:
    path: /etc/systemd/journald.conf
    regexp: '^Compress'
    line: 'Compress=yes'
    state: present
  notify: Restart systemd-journald service

- name: Ensure journald is configured to write logfiles to persistent disk
  lineinfile:
    path: /etc/systemd/journald.conf
    regexp: '^Storage'
    line: 'Storage=persistent'
    state: present
  notify: Restart systemd-journald service

- name: Ensure journald is not configured to send logs to rsyslog
  lineinfile:
    path: /etc/systemd/journald.conf
    regexp: '^ForwardToSyslog'
    line: 'ForwardToSyslog=yes'
    state: absent
  notify: Restart systemd-journald service

- name: Ensure accounts in /etc/passwd use shadowed passwords
  ansible.builtin.command:
    cmd: sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i /etc/passwd
  become: true

